<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单调栈及其应用</title>
      <link href="/2019/08/27/%E5%8D%95%E8%B0%83%E6%A0%88%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
      <url>/2019/08/27/%E5%8D%95%E8%B0%83%E6%A0%88%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="问题引入："><a href="#问题引入：" class="headerlink" title="问题引入："></a>问题引入：</h2><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1506" target="_blank" rel="noopener">hdu 1506 最大矩形</a></li><li>题意：<br>给你一个数组表示一个宽为1的长方形的高度，求被这块区域覆盖的最大矩形面积。</li></ul><h3 id="做法1："><a href="#做法1：" class="headerlink" title="做法1："></a>做法1：</h3><p><code>分治</code></p><ul><li>总问题（l,r), 有3个子问题：</li></ul><ol><li>左边最大矩形</li><li>右边最大矩形</li><li>跨越左右区间的最大矩形</li></ol><ul><li>左右直接可以递归，重点在于如何在线性时间内求出第3个子问题：<br>思考枚举左右端点，那么复杂度就是n / 2 * n / 2， 失去了分治的意义。但是我们在枚举左端点的时候，可以想到它的高度肯定只能变小而不能增大（因为肯定要经过前面枚举过来的高度），所以枚举右边的时候并不是每个左端点都要让右边重新从中间开始枚举，而是只会不断向右扩大。所以左右都是线性扫描，就是n.</li><li>总的时间复杂度O(n) = 2 <em> O(n / 2) + n; 最后就是O(n) = n + n </em> log(n);</li><li><a href>代码</a>……恩，我还没过……</li></ul><a id="more"></a><h3 id="做法2："><a href="#做法2：" class="headerlink" title="做法2："></a>做法2：</h3><p><code>单调栈</code></p><ul><li>用单调栈O（n）的算法找出每个点向左第一个小于它的点，向右找出第一个小于它的值。就是找到一个以该点为最小值的最大区间。</li></ul><hr><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><blockquote><p>单调栈的用途比较固定：对每个数可以求出八个数，左边第一个小于该数的位置，和第一个小于等于该数的位置，还有右边，还有大于。</p></blockquote><ul><li><p>具体演示单调栈原理过程：<br><a href="http://note.youdao.com/noteshare?id=db18e022fcf25ba0968ac8d897f22eac" target="_blank" rel="noopener">有道云博客</a></p></li><li><p>模板：（求左区间第一个比它小的坐标位置）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s.push(<span class="number">0</span>);</span><br><span class="line">h[<span class="number">0</span>] = <span class="number">-1</span>;                      <span class="comment">//这2步很重要</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;h[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; h[s.top()] &gt;= h[i])</span><br><span class="line">s.pop();</span><br><span class="line"></span><br><span class="line">l[i] = s.top() + <span class="number">1</span>;         <span class="comment">//如果没有上面那两句，这里当s为空时就没有top</span></span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>求右区间第一个比它小的坐标位置：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s.push(n+<span class="number">1</span>);</span><br><span class="line">h[n+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty() &amp;&amp; h[s.top()] &gt;= h[i])</span><br><span class="line">        s.pop();</span><br><span class="line"></span><br><span class="line">    r[i] = s.top() - <span class="number">1</span>;</span><br><span class="line">    s.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>有了这两个模板就可以过问题引入的那个问题啦。</p><hr><h2 id="单调栈应用"><a href="#单调栈应用" class="headerlink" title="单调栈应用"></a>单调栈应用</h2><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p>给出一个n行m列的网格，每个格子是红色或者黑色的。求出最大的红色矩形。（0 &lt; n , m &lt; 1000)</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><ul><li>n只有1000，试着枚举下边界，这样再思考如何在这个下边界确定的情况下在O(n)时间内求出最大红色矩形面积。</li><li>对于m列，每一列都可以从下边界开始扩展红色区域，碰到黑色区域就停止，这样就给出了一个红色区域，那么此时就将问题转化为了求被这个红色区域覆盖的最大矩形了。哇，那不就和问题导入的那个问题一样了嘛。</li><li>当然这里还有个问题就是每一行每一列我们都要去扩，去扩的时候又要往上遍历，最大就是n <em> m </em> n.但是其实没有必要每一行都去扩， 把上一行的状态记录下来就可以直接扩展到现在这一行的状态啦。</li><li>或者直接dp做也是可以的。（等我写完再补……）</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h3 id="SPOJ-min-sub-Largest-Submatrix-vj-链接"><a href="#SPOJ-min-sub-Largest-Submatrix-vj-链接" class="headerlink" title="SPOJ min_sub Largest Submatrix (vj 链接) "></a><a href="https://cn.vjudge.net/problem/SPOJ-MINSUB" target="_blank" rel="noopener">SPOJ min_sub Largest Submatrix (vj 链接) </a></h3><p><code>二分</code> <code>单调栈</code></p><ul><li>题目大意：给你一个R <em> C的矩形，（ R (R ≤ 1000), C (C ≤ 1000)），还有一个K (K ≤ R </em> C)， 求一个矩阵，面积&gt;=K, 并且使得这个矩阵的最小值是最大的。矩阵里的数0 &lt;= M &lt;= $10^9$</li><li>当一个问题是求解方案的情况，并且它的答案在一个区间里面，都应该想到可以用二分来把一个求解性问题转化成一个验证性问题。我原来想过二分，然后智障的觉得 <em> n </em> log(x)会T。TAT.</li><li>解题思路：</li></ul><ol><li>答案区间肯定在[0, $10^9$],然后二分一个矩阵的最小值为x，然后判断是否存在一个矩阵面积大于等于K并且最小值&gt;=x.如果满足条件，也就是说这个值还可以再大一点，即在右区间，这是可能取到的情况，所以这时候我选择的二分模型就是左闭右开。</li><li>然后是怎么判断是否存在一个矩阵面积大于等于K并且最小值&gt;=x。因为R只有1000，所以试着枚举下边界，对下边界的这一行，对每一列考虑值是否&gt;=x，&gt;=x的格子可以取，但是小于x的格子就不能选择。然后再次神奇的发现选择二分后又变成了上面那道思考题的模型啦。</li><li>这里还有个二分优化（虽然我没有用），就是如果觉得1-$10^9$二分不够优,可以把矩阵元素排序后再矩阵元素的值里选择答案二分。</li></ol><ul><li>代码流程：</li></ul><ol><li>输入矩阵</li><li>二分满足条件矩阵最小值的最大值</li><li>根据这个值写个check函数去判断此时满足这个条件的最大矩阵面积，这里写个单调栈的函数来求最大矩阵面积，如果这个最大面积&gt;=k,则返回true,否则返回false.</li><li>如果判断成功，则更新答案。</li></ol><ul><li><p>主要代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] &gt;= x)</span><br><span class="line">dp[j] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[j] = <span class="number">0</span>;</span><br><span class="line">&#125;                       <span class="comment">//算出所有的高度后</span></span><br><span class="line">monotonic_stack();      <span class="comment">//这里是算最大面积的函数</span></span><br><span class="line"></span><br><span class="line">        y = max(y, ans);        <span class="comment">//不断更新这个x下的面积最大值</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= K)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://cn.vjudge.net/solution/10155695" target="_blank" rel="noopener">完整代码</a></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> llong;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> l[maxn];<span class="comment">//存id求面积</span></span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];<span class="comment">//存此时的高度</span></span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> R, C, K;</span><br><span class="line"><span class="keyword">int</span> ans, ret, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">monotonic_stack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//memset(l, 0, sizeof(l));</span></span><br><span class="line"><span class="comment">//memset(r, 0, sizeof(r));</span></span><br><span class="line"><span class="comment">//for (int i=1; i&lt;=C; ++i)</span></span><br><span class="line">    <span class="comment">//    printf("dp[%d] = %d\n", i, dp[i]);</span></span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">s.pop();</span><br><span class="line">s.push(<span class="number">0</span>);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=C; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; dp[s.top()] &gt;= dp[i])</span><br><span class="line">s.pop();</span><br><span class="line">l[i] = s.top() + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//printf("l[%d]=%d\n", i, l[i]);</span></span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">s.pop();</span><br><span class="line">s.push(C+<span class="number">1</span>);</span><br><span class="line">dp[C+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=C; i&gt;=<span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!s.empty() &amp;&amp; dp[s.top()] &gt;= dp[i])</span><br><span class="line">s.pop();</span><br><span class="line">r[i] = s.top() - <span class="number">1</span>;</span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span>;   <span class="comment">//单次里的最大值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=C; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//printf("l[%d]=%d r[%d]=%d\n", i, l[i], i, r[i]);</span></span><br><span class="line"><span class="keyword">int</span> tmp = (r[i] - l[i] + <span class="number">1</span>) * dp[i];</span><br><span class="line"><span class="comment">//printf("tmp=%d\n", tmp);</span></span><br><span class="line">ans = max(tmp, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return res;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//printf("x=%d\n", x);</span></span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] &gt;= x)</span><br><span class="line">dp[j] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[j] = <span class="number">0</span>;</span><br><span class="line">&#125;                       <span class="comment">//算出所有的高度后</span></span><br><span class="line">monotonic_stack();</span><br><span class="line"></span><br><span class="line">        y = max(y, ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= K)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1000000001</span>;</span><br><span class="line">    <span class="comment">//int l=0, r=10;</span></span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (check(mid))   <span class="comment">//满足条件，答案还可以更大一点</span></span><br><span class="line">&#123;</span><br><span class="line">    l = mid;</span><br><span class="line">    ret = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;R, &amp;C, &amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=R; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=C; ++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max_min = solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, max_min, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
